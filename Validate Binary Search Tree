98. Validate Binary Search Tree
Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys strictly less than the node's key.
The right subtree of a node contains only nodes with keys strictly greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
Example 1:
Input: root = [2,1,3]
Output: true

Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false

Approach : DFS

class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, null, null);
    }

    private boolean isValidBST(TreeNode node, TreeNode minNode, TreeNode maxNode) {
        if (node == null) return true;

        if (minNode != null && node.val <= minNode.val) return false;
        if (maxNode != null && node.val >= maxNode.val) return false;

        return isValidBST(node.left, minNode, node) && isValidBST(node.right, node,maxNode);
    }
}
